h2. Redirecting Legacy URLs

Many Refinery sites replace old ones that have links to these older pages. This guide will show you how to:

* Match old urls and redirect them to appropriate new ones

endprologue.

h3. Meet Rack::Rewrite

"Rack::Rewrite":https://github.com/jtrupiano/rack-rewrite is Rack middleware you can add to Refinery to intercept and redirect certain URLs.

h3. Add Rack::Rewrite to your Refinery Application

Edit your +Gemfile+ and add this line to the bottom:

<ruby>
gem 'rack-rewrite', '~> 1.0.2'
</ruby>

To install this gem now run

<shell>
$ bundle install
</shell>

Finally edit <tt>config/application.rb</tt> and add the +require+ line and +middleware.insert_before+ block into your file.

<ruby>
module Refinery
  class Application < Rails::Application
    require 'rack/rewrite'

    config.middleware.insert_before(Rack::Lock, Rack::Rewrite) do
      # example rewrites
      rewrite '/wiki/John_Trupiano', '/john'
      r301 '/wiki/Yair_Flicker', '/yair'
      r302 '/wiki/Greg_Jastrab', '/greg'
      r301 %r{/wiki/(\w+)_\w+}, '/$1'
      r301 %r{/blog/tag/.*},"/blog"
    end

    # rest of your refinery application module
  end
end
</ruby>

Restart your server and you're done.

TIP: To better understand the DSL of Rack::Rewrite, check out the "documentation":https://github.com/jtrupiano/rack-rewrite, or "read":http://blog.smartlogicsolutions.com/2009/11/24/rack-rewrite-google-analytics-makes-site-transitions-seamless/ how the author of the middleware used it in conjuction with Google
