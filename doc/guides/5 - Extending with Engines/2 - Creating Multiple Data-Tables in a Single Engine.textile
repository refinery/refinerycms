h2. Creating Multiple Data-Tables in a Single Engine

This guide will show you how to:

* Creating multiple tables on one single extension

endprologue.

WARNING: This only works on Refinery versions 2.0.0 and greater.

h4. Generating an extension

Refinery ships with an extension generator that makes adding your own functionality a breeze. It works just like the Rails scaffold generator.

<shell>
$ rails generate refinery:engine singular_model_name attribute:type [attribute:type ...]
</shell>

TIP: to see all the options supported by the +refinery:engine+ generator just run +rails g refinery:engine+.

Here is a list of the different field types are what they give you:

|*field type*|*description*|
|text|a multiline visual editor|
|resource|a link which pops open a dialog which allows the user to select an existing file or upload a new one|
|image|a link which pops open a dialog which allows the  user to select an existing image or upload a new one|
|string and integer|a standard single line text input|

If you remember, we told Rick that we'll give him an area to post up events he'll be at. Although he could technically create a new page in Refinery to add this content there, areas that have special functionality are much better suited as an extension.

Rick is going to want to enter the following information about each event:

* The event title
* The event date
* A photo
* A little blurb about the event.

Run this command to generate the events extension for Rick[1]:

<shell>
$ rails generate refinery:engine event title:string date:datetime photo:image blurb:text
      create  vendor/extensions/events/app/controllers/admin/events_controller.rb
      create  vendor/extensions/events/app/controllers/events_controller.rb
      create  vendor/extensions/events/app/models/event.rb
      create  vendor/extensions/events/app/views/admin/events/_form.html.erb
      create  vendor/extensions/events/app/views/admin/events/_event.html.erb
      create  vendor/extensions/events/app/views/admin/events/_sortable_list.html.erb
      create  vendor/extensions/events/app/views/admin/events/edit.html.erb
      create  vendor/extensions/events/app/views/admin/events/index.html.erb
      create  vendor/extensions/events/app/views/admin/events/new.html.erb
      create  vendor/extensions/events/app/views/events/index.html.erb
      create  vendor/extensions/events/app/views/events/show.html.erb
      create  vendor/extensions/events/config/locales/en.yml
      create  vendor/extensions/events/config/locales/lolcat.yml
      create  vendor/extensions/events/config/locales/nb.yml
      create  vendor/extensions/events/config/locales/nl.yml
      create  vendor/extensions/events/config/routes.rb
      create  vendor/extensions/events/db/migrate/create_events.rb
      create  vendor/extensions/events/db/seeds/events.rb
      create  vendor/extensions/events/features/manage_events.feature
      create  vendor/extensions/events/features/step_definitions/event_steps.rb
      create  vendor/extensions/events/features/support/paths.rb
      create  vendor/extensions/events/lib/generators/refinerycms_events_generator.rb
      create  vendor/extensions/events/lib/events.rb
      create  vendor/extensions/events/lib/tasks/events.rake
      create  vendor/extensions/events/public/.gitkeep
      create  vendor/extensions/events/readme.md
      create  vendor/extensions/events/refinerycms-events.gemspec
------------------------
Now run:
bundle install
rails generate refinery:events
rake db:migrate
rake db:seed
------------------------
</shell>

As the output shows next run:

<shell>
$ bundle install
$ rails generate refinery:events
$ rake db:migrate
$ rake db:seed
</shell>

A +refinery:events+ generator is created for you to install the migration to create the events table. Run all the commands provided by in the terminal.

TIP: When new extensions are added, it's a good idea to restart your server for new changes to be loaded in.

As you can see inside your text editor, the event extension is now stored in +vendor/extensions/events/+. This is where all your files &mdash; including your migration file &mdash; will be placed. The folder structure of +events+ is nearly identical to a normal Rails app, but has a few additions to provide Refinery functionality.

Once you have generated an extension, it's time to create another table to put inside of it.

To do that, run the following command. Notice the last argument(+--extension extension_name+). This is how Refinery knows which engine to insert your new code.

TIP: You can additionally specify +--pretend+ to simulate generation, so you may inspect the outcome without actually modifying anything.

<shell>
$ rails g refinery:engine place name:string --extension events 
	    create  vendor/extensions/events/app/controllers/admin/places_controller.rb
      create  vendor/extensions/events/app/controllers/places_controller.rb
      create  vendor/extensions/events/app/models/place.rb
      create  vendor/extensions/events/app/views/admin/places/_actions.html.erb
      create  vendor/extensions/events/app/views/admin/places/_form.html.erb
      create  vendor/extensions/events/app/views/admin/places/_states.html.erb
      create  vendor/extensions/events/app/views/admin/places/_records.html.erb
      create  vendor/extensions/events/app/views/admin/places/_place.html.erb
      create  vendor/extensions/events/app/views/admin/places/_sortable_list.html.erb
      create  vendor/extensions/events/app/views/admin/places/edit.html.erb
      create  vendor/extensions/events/app/views/admin/places/index.html.erb
      create  vendor/extensions/events/app/views/admin/places/new.html.erb
      create  vendor/extensions/events/app/views/places/index.html.erb
      create  vendor/extensions/events/app/views/places/show.html.erb
      create  vendor/extensions/events/config/locales/tmp/en.yml
      create  vendor/extensions/events/config/locales/tmp/fr.yml
      create  vendor/extensions/events/config/locales/tmp/lolcat.yml
      create  vendor/extensions/events/config/locales/tmp/nb.yml
      create  vendor/extensions/events/config/locales/tmp/nl.yml
      create  vendor/extensions/events/config/tmp/routes.rb
      create  vendor/extensions/events/db/migrate/create_places.rb
      create  vendor/extensions/events/db/seeds/places.rb
      create  vendor/extensions/events/features/manage_places.feature
      create  vendor/extensions/events/features/step_definitions/place_steps.rb
      create  vendor/extensions/events/features/support/tmp/paths.rb
      create  vendor/extensions/events/lib/generators/refinerycms_places_generator.rb
      create  vendor/extensions/events/lib/refinerycms-places.rb
      create  vendor/extensions/events/lib/tasks/places.rake
      create  vendor/extensions/events/refinerycms-places.gemspec
      create  vendor/extensions/events/spec/models/place_spec.rb
      append  vendor/extensions/events/lib/refinerycms-events.rb

------------------------
Now run:
bundle install
rails generate refinery:events places
rake db:migrate
------------------------
</shell>

Run the commands listed above. Notice +rails generate refinery:events places+. The +rails generate refinery:events places+ will copy the migration files from +vendor/extensions/events/db/migrate+ to +db/migrate+ and will prepend a timestamp to each migration. This is so an extension that was written before your application will declare its migrations chronologically later than the migrations you wrote for the app. For instance, if you wrote your app on Tuesday and then inserted the extension on Wednesday, you would want the timestamps on the migrations to show Wednesday rather than the date it was created &mdash; perhaps Monday. If the extension didn't do this, when you deployed your application, it would run the migrations for your extension first, potentially failing because it couldn't find the Refinery database tables it needs to complete.

<shell>
$ bundle install
$ rails generate refinery:events places

You already have a migration called create_events
      create  db/migrate/20110608043313_create_places.rb
   identical  db/seeds/events.rb
      create  db/seeds/places.rb
------------------------
Now run:
rake db:migrate
rake db:seed
------------------------
</shell>

Lastly, run +rake db:migrate+ and +rake db:seed+ as usual.
