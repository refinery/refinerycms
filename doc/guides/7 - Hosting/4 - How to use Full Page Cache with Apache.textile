h2. How to use Full Page Cache with Apache

If you have a simple Page on a slow Server with Apache you can use the Page
Cache Full for deliver the most pages directly from Apache (Without passenger).

endprologue.

h3. Activate "Cache Pages Full"

* got to http://your-website/refinery/settings
* Check the Entry "Cache Pages Full" on
* Restart the Application (example by touching <tt>tmp/restart.txt</tt> in your
 current-Directory on server)

From now every Page you request from Refinery will be saved at
public/refinery_page_cache. E.g. after you request http://your-website/about
you find a File named public/refinery_page_cache/about.html.

h3. Redirect

Now we have to redirect Apache to this generated Files.
Write a <tt>.htaccess</tt>-File like this

<code>
RewriteEngine On

# Rewrite home to check for static
RewriteRule ^$ home

#checks cache directory for already cached pages
RewriteCond %{REQUEST_URI} ^/(../)?[^/]*$
RewriteCond %{DOCUMENT_ROOT}/refinery_page_cache%{REQUEST_URI}.html -f
RewriteRule ^([^.]+)$ refinery_page_cache/%{REQUEST_URI}.html [L]

# by default, Rails appends assetâ€˜s timestamps to all asset paths. This allows
# you to set a cache-expiration date for the asset far into the future
ExpiresActive on
ExpiresByType image/gif "access plus 1 year"
ExpiresByType image/png "access plus 1 year"
ExpiresByType image/jpeg "access plus 1 year"
ExpiresByType image/x-icon "access plus 1 year"
ExpiresByType text/css "access plus 1 year"
ExpiresByType application/javascript "access plus 1 year"

# compress static text files
AddOutputFilterByType DEFLATE text/html text/plain text/xml text/javascript text/css application/javascript
</code>

Now delivers the Apache already generated Pages without touching the passenger.