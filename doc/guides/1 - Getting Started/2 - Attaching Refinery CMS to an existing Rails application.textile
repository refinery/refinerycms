h2. Attaching Refinery CMS to an existing Rails application

This guide covers integration with Refinery CMS. After reading it, you should be familiar with:

* Attaching Refinery CMS to an existing Rails application

endprologue.

WARNING. This guide is based on Refinery CMS 0.9.9.16. Some of the code shown here will not work in earlier versions of Refinery.

h3. Guide Assumptions

This guide is designed for those who want to attach Refinery CMS to an existing Rails application.

Refinery is a Ruby on Rails web application. If you have no prior experience with Rails, you will find a very steep learning curve diving straight into Refinery.  There are some good free resources on the Internet for learning Rails, including:

* "Getting Started with Rails":http://guides.rubyonrails.org/getting_started.html
* "Rails for Zombies":http://railsforzombies.org/labs

h3. Steps to add Refinery CMS to your application

h4. Add Refinery CMS as a dependency in your Gemfile

Open up your Gemfile and add the latest version (a later version than the one shown "may exist":https://rubygems.org/gems/refinerycms/versions):

<ruby>
  gem 'refinerycms', '= 0.9.9.16'
</ruby>

Now, to install the gem run:

<shell>
  bundle install
</shell>

h4. Generate support files and migrations

Now you can simply run the RefineryCMS generator:

<shell>
  rails generate refinerycms
</shell>

h4. Migrate your database

After the previous step you should have a number of new migrations in your db/migrate directory.
To use these just run:

<shell>
  rake db:migrate
</shell>

After this, you should be all set.

h3. Gotchas

h4. Check your app for namespace collisions

Refinery isn't entirely namespaced or decoupled from the application it becomes a part of, and this can cause problems in integrating with an existing app.
The following notes may help.

Modules and classes in the host application which have previously caused problems include Admin, Image and Page, though this is not an exhaustive list.
While some of these collisions are not visible in the schema (e.g. an Admin class colliding with an Admin module) you may find tables and models which refinery and your app have in common.
Having discovered this you may want to refactor your app to use different class and table names, or you may wish to remove the functionality and instead use that provided by Refinery.
For example an admin model could probably be replaced with refinery's own admin authentication system.

h4. ApplicationController

Refinery hooks in to ApplicationController, adding before-filters and the like.
This means any of your controllers inheriting from it will also be modified.
This can have unexpected consequences, such as breaking your entire controller test-suite due to not having completed the initial Refinery user creation in the spec setup.
One approach is to bootstrap the setup before executing your specs, or stubbing.
Another is to create a replacement ApplicationController, different from the one Refinery will modify, and base your application on this instead.

h4. Devise

While Refinery's use of Devise should not effect your own, since you can declare scopes, you may find issues are caused by
Devise using your ApplicationController, which as previously mentioned is modified by Refinery.

h3. Getting Help

As this is a relatively new process, if you need help with any of these steps we would love to "hear about it":/guides/how-to-get-help-with-refinery.