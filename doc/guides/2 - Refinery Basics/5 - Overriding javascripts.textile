h2. Overriding javascripts

Refinery by default will provide you with the required javascript files you need.  Sometimes you want to provide your own files and this guide will show you how to:

*Change the default javascript libraries included.
*Add your own files to be included on a per page basis.

endprologue.

h3. Overriding the JavaScript libraries

Refinery uses jQuery by default, but if you would like to override the javascript library to dojo for example you can add this to home.html.erb (or any other view):

<shell>
<% content_for :javascript_libraries, javascript_include_tag('https://ajax.googleapis.com/ajax/libs/dojo/1.6.1/dojo/dojo.xd.js') %>
</shell>

h3. Overriding the JavaScript files included

If you want to override one of the javascript files refinery comes built with (for example, to add your own jQuery plugin for the home page), you'll need to override the files Refinery is including. 

It is easy to override the files that are provided by default. You simply have to include this in your home.html.erb:

<shell>
<% content_for :javascript_libraries, javascript_include_tag('jquery') %>
<% content_for :javascripts do %>
  <% javascript_include_tag('jquery.cycle.all', 'jquery.super_awesome.plugin', 'more') %>
<% end %>
</shell>

This will override the javascript files that are included on your home page. If you want to override the files for other pages you can override show.html.erb and include or exclude any files you desire.

h3. Possible combinations of overriding
Refinery provides you with four unique ways of overriding the default JavaScript files, two we have already seen. 

<shell>
<% content_for :before_javascript_libraries, javascript_include_tag('jquery.cycle.all') %>
<% content_for :javascript_libraries, javascript_include_tag('jquery') %>
<% content_for :after_javascript_libraries, javascript_include_tag('jquery.cycle.all') %>
<% content_for :javascripts do %>
</shell>

These are pretty self explanatory, but <tt>before_javascript_libraries</tt> will include a file before any libraries have been loaded.  <tt>javascript_libraries</tt>, like we have seen, will load any javascript libraries we want to include.  <tt>after_javascript_libraries</tt> will load any files you wish to include directly below your libraries, and finally we have the <tt>javascripts</tt> do block that we have seen that will load all the files we are using for our project. 

TIP. You can change the files that are loaded on a per page basis by simply overriding the corresponding views to include only what you need. 
