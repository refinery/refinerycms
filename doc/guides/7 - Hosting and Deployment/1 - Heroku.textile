h2. Heroku

"Heroku":http://heroku.com is a popular hosting choice for many developers. This guide will show you how to:

* Install and deploy a Refinery app on the Heroku hosting platform

endprologue.


h3. Creating a new Refinery app on Heroku

First you need to install Refinery. To do that you need the refinerycms gem.

<shell>
gem install refinerycms
</shell>

Then, if you haven't done so already, follow the first three steps of the "Heroku quick start guide":https://devcenter.heroku.com/articles/quickstart. They cover signing up for Heroku, installing the Heroku client, and logging in through the client.

Now it's time to create your Refinery application using the built in +--heroku+ option

<shell>
refinerycms myapp --heroku
</shell>

NOTE: Heroku relies on "Git":http://git-scm.com/download being installed on your system. Please check or install it beforehand.

Watch the output for these lines

<shell>
Creating Heroku app..
Running: cd /path/to/app/myapp && heroku create
Creating random-site-name..... done
Created http://random-site-name.heroku.com/
</shell>

This will output the URL for your Heroku hosted Refinery application. Your application should now be live at http://random-site-name.heroku.com


h3. Deploying an existing local Refinery application

If you have already built a Refinery application locally, you'll need to make some changes to be able to deploy to Heroku.

h4. Step 0: Setup and log into Heroku

If you haven't done so already, follow the first three steps of the "Heroku quick start guide":https://devcenter.heroku.com/articles/quickstart. They cover signing up for Heroku, installing the Heroku client, and logging in through the client.

h4. Step 1: Update the Gemfile

h5. If your local database is not PostgreSQL

The only database that Heroku supports is PostgreSQL. You can still keep using whatever you’re using locally, but when your app is running on Heroku, it needs to be able to connect to PostgreSQL.  So in your Gemfile, change:

<shell>
gem 'sqlite3' # or whatever the database driver for your local database is
</shell>

to:
<shell>
group :development, :test do
  gem 'sqlite3'
end
group :production do
  gem 'pg'
end
</shell>

'pg' is the database driver for PostgreSQL.

h5. Getting a place to store files

If you want to use Refinery's image and resource support, you need to add the 'fog' gem too. Edit the Gemfile as shown in "Adding Amazon S3 Support" below. (You can do the other steps in that section after your site is first deployed.)

h5. Applying your changes

Now we just need to run bundle and add the changes to git:
<shell>
bundle install
git add Gemfile
git add Gemfile.lock
git commit "setup for Heroku"
</shell>

h4. Step 2: Set up your app on Heroku:
<shell>
app_name="your-app-name"
heroku create $app_name --stack cedar
git push heroku master
</shell>

(If someone else created the Heroku app for you, make sure it is on the "Cedar stack":https://devcenter.heroku.com/articles/cedar. Cedar is the newest stack and Heroku recommends it for new apps. You can run @heroku stack@ to check which stack your app is on.)

h4. Step 3: Copy your data from your local database to the Heroku app

Since you've set up your website locally, you've probably got a bunch of information in a local database.  Rather than trying to recreate all that on Heroku, we're going to import your database using a gem called taps.  One gotcha is that Taps might throw errors if you're using Ruby 1.9.3, so if you get any errors, switch to 1.9.2 for an easier time.

You'll want to actually install taps to your system – not just add it to your Gemfile.

<shell>
gem install taps
</shell>

Now let’s actually copy the data to your Heroku app.

<shell>
heroku db:push
</shell>

If that command gives you the error “no such file to load -- taps/operation”, you have run into "this Heroku and taps bug":https://github.com/heroku/heroku/issues/69. See its comments for fixes to try.


h3. Adding Amazon S3 Support

If you want to use Refinery's image and resource support you'll need to setup storage, too. Heroku does not persist your app’s local filesystem, so to store uploaded files, you need to store them “in the cloud”. This section explains how to store the files in Amazon S3.

On Amazon S3, create a bucket called "my_app_production". Then add this to the end of your Gemfile (this might already be done for you):

<ruby>
group :production do
  gem 'fog'
end
</ruby>

Next, tell Heroku about your new S3 bucket.

<shell>
heroku config:add S3_KEY=123key S3_SECRET=456secret S3_BUCKET=my_app_production
</shell>

If you have created your bucket in a region other than 'us-east-1' you need to add S3_REGION=s3region also.

That's it! Heroku will restart your site and it should be live with S3 support.


h3. Troubleshooting

h4. Missing a required gem

Simply add that gem to the Gemfile.

h4. Acts As Indexed giving you problems (Refinery CMS version 0.9.7.13 and below)

Make sure that you are using at least version 0.6.6 (latest at time of writing) by putting this in your Gemfile (instead of the current entry):

<ruby>
gem 'acts_as_indexed', '= 0.6.6'
</ruby>

h4. Images or Resources don’t work

Double check your S3 information and make sure that the right buckets actually exist.

See the "How to use Amazon S3 for storage":http://refinerycms.com/guides/amazon-s3-for-uploads guide for more specific information on file storage.

h4. Other problems?

Otherwise, run `heroku logs` or `heroku logs --tail` and see if you can spot the error yourself.
Or you could explore the "help options available":/guides/how-to-get-help.
