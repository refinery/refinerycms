h2. Heroku

"Heroku":http://heroku.com is a popular hosting choice for many developers. This
guide will show you how to:

* Install and deploy Refinery on the Heroku hosting platform

endprologue.

h3. Starting Out

First you need to install Refinery. To do that you need the refinerycms gem.

<shell>
gem install refinerycms
</shell>

Next go to "Heroku.com":http://heroku.com and click "sign up" for a free
account.

Now you've got a Heroku account, install the Heroku gem and provide your account
credentials:

<shell>
gem install heroku
heroku list
</shell>

Now it's time to create your Refinery application using the built in +--heroku+
option:

<shell>
refinerycms myapp --heroku
</shell>

NOTE: Heroku relies on "Git":http://git-scm.com/download being installed on your
system. You should install it beforehand.

Watch the output for these lines:

<shell>
Creating Heroku app..
Running: cd /path/to/app/myapp && heroku create
Creating random-site-name..... done
Created http://random-site-name.herokuapp.com/
</shell>

This will output the URL for your Heroku-hosted Refinery application. Your
application should now be live at http://random-site-name.heroku.com.

Note that you may have issues precompiling your assets, which may result in
system images not loading. Skip to the following Step 3 for a fix.

h3. If you already have a local Refinery application built

If you have already built a Refinery application locally using SQLite, you'll
need to make some changes to be able to deploy to Heroku.

h4. Step 0: Setup and log into Heroku

If you haven't already - follow the first three steps of the
"Heroku quick start guide":https://devcenter.heroku.com/articles/quickstart.

h4. Step 1: install the Taps gem

Since you've set up your website locally - you've probably got a bunch of
information in a local database.  Rather than trying to recreate all that on
Heroku we're going to import your SQLite database using a gem called taps.
One gotcha is that Taps will throw errors if you're using Ruby 1.9.3 - so
switch to 1.9.2 for an easier time.

You'll want to actually install this to your system - not just add it to your
Gemfile.

<shell>
gem install taps
</shell>

h4. Step 2: Update the Gemfile

Right now your Gemfile probably uses sqlite3 as a data store. This is fine
locally, but +sqlite3+ doesn't exist on Heroku. In your +Gemfile+, change:

<shell>
gem 'sqlite3'
</shell>

to:
<shell>
group :development, :test do
  gem 'sqlite3'
end
</shell>

Next we need to add three more gems.

# The Heroku gem allows you to interface with Heroku's API
# Fog allows you to use S3 assets (See Adding Amazon S3 Support below)
# Postgres support (added for Heroku)

You can just throw these at the end of your Gemfile:

<shell>
gem 'heroku'
gem 'fog'
gem 'pg'
</shell>

Now we just need to run bundle and add the changes to git:
<shell>
bundle install
git add Gemfile
git add Gemfile.lock
git commit "setup for Heroku"
</shell>

h4. Step 3: Set up asset precompilation

Inside +config/application.rb+, at the end of the config block, make sure you
add the following:

<ruby>
config.assets.initialize_on_precompile = true
</ruby>

You may also need to enable the experimental +user_env_compile+ option on
Heroku. You can read more
"here":https://devcenter.heroku.com/articles/labs-user-env-compile, but in
short, run the following command:

<shell>
$ heroku labs:enable user_env_compile
</shell>

This is necessary to make post-deploy asset precompilation happen. Without this,
Refinery will fail to compile its assets, owing to its use of Rails' URL helpers
inside of its Javascript files (necessary for its WYSIWYG editor).

In theory, this should only affect applications where +initialize_on_precompile+
is false or default; however, you may need to set the +user_env_compile+ option
if you receive complaints about being unable to connect to +127.0.0.1+.

h4. Step 4: Set up your app on Heroku

<shell>
app_name="your-app-name"
heroku create $app_name --stack cedar
git push heroku master
</shell>

h5. Step 5: Import your data
<shell>
heroku db:push
</shell>

h3. Adding Amazon S3 Support

If you want to use Refinery's image and resource support you'll need to setup
storage too. Create a bucket called "my_app_production" and add this line in
your Gemfile (this might already be done for you):

<ruby>
gem 'fog'
</ruby>

Next tell Heroku about your new S3 bucket.

<shell>
heroku config:add S3_KEY=123key S3_SECRET=456secret S3_BUCKET=my_app_production
</shell>

If you have created your bucket in a region other than 'us-east-1' you need to
add S3_REGION=s3region also.

That's it! Heroku will restart your site and it should be live with S3 support.

h3. Troubleshooting

h4. Missing a required gem

Simply add that gem to the Gemfile.

h4. Images or Resources donâ€™t work

Double check your S3_ information and make sure that the right buckets actually
exist. You can confirm against the values Heroku has recorded by running
+heroku config+.

h4. Other problems?

See the "How to use Amazon S3 for
storage":http://refinerycms.com/guides/amazon-s3-for-uploads guide for more
specific information.

Otherwise, run `heroku logs` or `heroku logs --tail` and see if you can spot the
error yourself. Or you could explore the "help options
available":/guides/how-to-get-help.
