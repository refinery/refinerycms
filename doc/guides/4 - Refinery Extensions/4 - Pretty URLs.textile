h2. Pretty / SEO-Friendly URLs

It's very important for Search Engine Optimization (SEO) purposes to have your URLs be human-readable. Refinery CMS ships with software (FriendlyID) that enables these marketing-friendly URLs with only minor modifications.

This guide will show you how to:

* Implement marketable URLs on a custom extension.

endprologue.

WARNING: This method is tested with Refinery CMS v. 2.0.0 only. It should be applicable to later versions, but not earlier versions (1.0.9 or earlier). It also works with v 3.0, although it has not been tested extensively.
Always ensure your code is backed up or under version control before making substantial changes.

h3. Fresh Slugs

FriendlyID requires that you create a string field entitled +slug+ on any model that you wish to convert. It's better to do this as a separate migration after creating the extension, because you don't want Refinery to auto-generate a field in the back-end; this attribute is set by code, not by hand.

To do so, from the root of your app, generate a new migration file to add the +slug+ column to your extensions's database table. We'll use a StaffMembers extension as an example.
<shell>
$ rails generate migration AddSlugToRefineryStaffMembers slug:string:index
</shell>

Your migration, +/db/migrate/..._add_slug_to_refinery_staff_members+ should look like this:
<ruby>
  class AddSlugToRefineryStaffMembers < ActiveRecord::Migration
    def change
      add_column :refinery_staff_members, :slug, :string
      add_index :refinery_staff_members, :slug
    end
  end
</ruby>

Now run
<shell>
$ rake db:migrate
</shell>

h3. Adding Friendly ID

In your model, add the following lines after the opening +class+ line:

<ruby>
  extend FriendlyId
  friendly_id :title, :use => [:slugged]
</ruby>

And in your controller, use the following instead of StaffMember.find
<ruby>
  StaffMember.friendly.find(params[:id])
</ruby>

If you want to use a different field than +title+ from which to generate the URL, be sure to change the first symbol after +friendly_id+ to be in accordance (for example, many extensions use +name+ instead).

Also be sure to remove any +to_param+ method that exists, or this will interfere.

Restart your server.

h3. Refreshing All Existing Entries

Each entry must be re-saved to generate its slug. You can do this quickly from the Rails console (obviously, replace +StaffMember+ with your model's name):

<ruby>
  StaffMember.all.map(&:save)
</ruby>

If all entries in the resulting array return true, everything is complete! If you have an entry return false, you may have some individual issues that prevent saving, and you can update these manually using the Refinery CMS administrative interface.
