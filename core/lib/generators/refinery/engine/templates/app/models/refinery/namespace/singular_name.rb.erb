module Refinery
  module <%= namespacing %>
    class <%= class_name %> < Refinery::Core::BaseModel
<% if table_name == namespacing.underscore.pluralize -%>
      self.table_name = 'refinery_<%= plural_name %>'
<% end %>
<% if localized? -%>

      translates <%= localized_attributes.map { |a| ":#{a.name}" }.join(', ') %>
<% end -%>
<% if string_attributes.any? -%>
<%   if include_form? -%>

      validates <%= string_attributes.first.name.to_sym.inspect %>, :presence => true, :uniqueness => true
<%   end -%>
<% else -%>

      # def title was created automatically because you didn't specify a string field
      # when you ran the refinery:engine generator. <3 <3 Refinery CMS.
      def title
        "Override def title in vendor/extensions/<%= namespacing.underscore %>/app/models/refinery/<%= namespacing.underscore %>/<%= singular_name %>.rb"
      end
<% end -%>
<% image_attributes.each do |a| -%>

      belongs_to :<%= a.name -%>, :class_name => '::Refinery::Image'
<% end -%>
<% resource_attributes.each do |a| -%>

      belongs_to :<%= a.name %>, :class_name => '::Refinery::Resource'
<% end -%>

      # To enable admin searching, add acts_as_indexed on searchable fields, for example:
      #
      #   acts_as_indexed :fields => [:title]

<% if include_moderation? -%>
      class << self
        def unmoderated
          where(:state => nil)
        end

        def approved
          where(:state => 'approved')
        end

        def rejected
          where(:state => 'rejected')
        end
      end

      def approve!
        self.update_column(:state, 'approved')
      end

      def reject!
        self.update_column(:state, 'rejected')
      end

      def rejected?
        self[:state] == 'rejected'
      end

      def approved?
        self[:state] == 'approved'
      end

      def unmoderated?
        self[:state].nil?
      end

      before_create do |<%= singular_name %>|
        unless Moderation.enabled?
          <%= singular_name %>[:state] = 'approved'
        end
      end

      module Moderation
        class << self
          def enabled?
            Refinery::Setting.find_or_set(:<%= singular_name %>_moderation, true, {
              :scoping => '<%= plural_name %>',
              :restricted => false
            })
          end

          def toggle!
            new_value = {
              :value => !<%= class_name %>::Moderation.enabled?,
              :scoping => '<%= plural_name %>',
              :restricted => false
            }
            Refinery::Setting.set(:<%= singular_name %>_moderation, new_value)
          end
        end
      end
<% end -%>
      class << self
        def get_all
          order('position ASC')
        end

      end
    end
  end
end
