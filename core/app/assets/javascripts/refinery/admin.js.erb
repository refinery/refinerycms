$(document).ready(init_interface);

var link_tester = {
  email_re : new RegExp(/^([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})$/i),
  url_re : new RegExp(/^(https?|ftp):\/\/(-\.)?([^\s/?\.#-]+\.?)+(\/[^\s]*)?$/i),
  page_re : new RegExp('^(https?:\/\/' + document.location.host + '|\/[a-z0-9]+)'),

  email: function(value, callback) {
    if (value != "") {
      callback(link_tester.email_re.test(value));
    }
  },

  url: function(value, callback) {
    if (value != "") {
      if (link_tester.page_re.test(value)) {
        link_tester.page(value, callback);
      } else {
        callback(link_tester.url_re.test(value));
      }
    }
  },

  page: function(value, callback) {
    var valid = false;
    $.ajax({
      url: value,
      timeout: 5000,
      success: function() {
        valid = true;
      },
      complete: function () {
        callback(valid);
      }
    });
  },

  validate_textbox: function(validation_method, textbox_id, callback) {
    var icon = '';
    var loader_img = $("<img id='" + textbox_id.replace('#','') + "_test_loader' src='<%= asset_path 'refinery/ajax-loader.gif' %>' alt='Testing...' style='display: none;'/>");
    var result_span = $("<span id='" + textbox_id.replace('#','') + "_test_result'></span>");

    loader_img.insertAfter($(textbox_id));
    result_span.insertAfter(loader_img);
    $(textbox_id).bind('paste blur',function(){
      $(textbox_id).stop(true); // Clear the current queue; if we weren't checking yet, cancel it.
      $(textbox_id + '_test_loader').hide();
      $(textbox_id + '_test_result').hide();
      $(textbox_id + '_test_result').removeClass('success_icon').removeClass('failure_icon');

      if (this.value != "") {
        // Wait 300ms before checking.
        $(textbox_id).delay(300).queue(function () {
          $(textbox_id + '_test_loader').show();
          $(textbox_id + '_test_result').hide();
          $(textbox_id + '_test_result').removeClass('success_icon').removeClass('failure_icon');

          validation_method(this.value, function (success) {
            if (success) {
              icon = 'success_icon';
            }else{
              icon = 'failure_icon';
            }
            $(textbox_id + '_test_result').addClass(icon).show();
            $(textbox_id + '_test_loader').hide();
          });

          if (callback) { callback($(textbox_id)); }

          $(this).dequeue();
        }); // queue
      }
    }); // bind
  },

  validate_url_textbox: function(textbox_id, callback) {
    link_tester.validate_textbox(link_tester.url, textbox_id, callback);
  },

  validate_email_textbox: function(textbox_id, callback) {
    link_tester.validate_textbox(link_tester.email, textbox_id, callback);
  }

};

var link_dialog = {
  initialised: false
  , init: function(){

    if (!this.initialised) {
      this.init_tabs();
      this.init_resources_submit();
      this.init_close();
      this.page_tab();
      this.web_tab();
      this.email_tab();
      this.initialised = true;
    }
  },

  init_tabs: function(){
    var radios = $('#dialog_menu_left input:radio');
    var selected = radios.parent().filter(".selected_radio").find('input:radio').first() || radios.first();

    radios.click(function(){
      link_dialog.switch_area($(this));
    });

    selected.attr('checked', 'true');
    link_dialog.switch_area(selected);
  },

  init_resources_submit: function(){
    <% absolute_page_links = defined?(Refinery::Pages) && Refinery::Pages.absolute_page_links %>
    $('#existing_resource_area .form-actions-dialog #submit_button').click(function(e){
      e.preventDefault();
      if((resource_selected = $('#existing_resource_area_content ul li.linked a')).length > 0) {
        resourceUrl = parseURL(resource_selected.attr('href'));
        relevant_href = <%= absolute_page_links ? "resource_selected.attr('href')" : "resourceUrl.pathname" %>;

        <% unless absolute_page_links %>
        // Add any alternate resource stores that need a absolute URL in the regex below
        if(resourceUrl.hostname.match(/s3.amazonaws.com/)) {
          relevant_href = resourceUrl.protocol + '//' + resourceUrl.host + relevant_href;
        }
        <% end %>

        if (typeof(resource_picker.callback) == "function") {
          resource_picker.callback({
            id: resource_selected.attr('id').replace("resource_", "")
            , href: relevant_href
            , html: resource_selected.html()
          });
        }
      }

      $('.form-actions-dialog #cancel_button').trigger('click');
    });
  },

  init_close: function(){
    $('.form-actions-dialog #cancel_button').not('.visual_editor_iframe_body .form-actions-dialog #cancel_button').click(close_dialog);

    if (parent
        && parent.document.location.href != document.location.href
        && parent.document.getElementById('visual_editor_dialog_submit') != null) {
      $('#dialog_container .form-actions input#submit_button').click(function(e) {
        e.preventDefault();
        $(parent.document.getElementById('visual_editor_dialog_submit')).click();
      });
      $('#dialog_container .form-actions a.close_dialog').click(close_dialog);
    }
  },

  switch_area: function(area){
    $('#dialog_menu_left .selected_radio').removeClass('selected_radio');
    $(area).parent().addClass('selected_radio');
    $('#dialog_main .dialog_area').hide();
    $('#' + $(area).val() + '_area').show();
  },

  //Same for resources tab
  page_tab: function(){
    $('.link_list li').click(function(e){
      e.preventDefault();

      $('.link_list li.linked').removeClass('linked');
      $(this).addClass('linked');

      var link = $(this).children('a.page_link').get(0);
      var port = (window.location.port.length > 0 ? (":" + window.location.port) : "");
      var url = link.href<%= %q{.replace(window.location.protocol + "//" + window.location.hostname + port, "")} unless defined?(Refinery::Pages) && Refinery::Pages.absolute_page_links %>;

      link_dialog.update_parent(url, link.rel.replace(/\ ?<em>.+?<\/em>/, ''));
    });
  },

  web_tab: function(){
    link_tester.validate_url_textbox("#web_address_text", function(){});

    $('#web_address_text, #web_address_target_blank').change(function(){
      link_dialog.update_parent( $('#web_address_text').val(),
                                 $('#web_address_text').val(),
                                 $('#web_address_target_blank').get(0).checked ? "_blank" : ""
      );
    });
  },

  email_tab: function() {
    link_tester.validate_email_textbox("#email_address_text", function(){});

    $('#email_address_text, #email_default_subject_text, #email_default_body_text').change(function(e){
      var default_subject = $('#email_default_subject_text').val(),
          default_body = $('#email_default_body_text').val(),
          recipient = $('#email_address_text').val();
          modifier = "?",
          additional = "";

      if(default_subject.length > 0){
        additional += modifier + "subject=" + default_subject;
        modifier = "&";
      }

      if(default_body.length > 0){
        additional += modifier + "body=" + default_body;
        modifier = "&";
      }

      var hex_recipient = '';
      for (var i = 0; i < recipient.length; i++) {
        hex_recipient += '%' + recipient.charCodeAt(i).toString(16);
      }
      link_dialog.update_parent("mailto:" + hex_recipient + additional, recipient);
    });
  },

  update_parent: function(url, title, target) {
    if (parent != null) {
      if ((visual_editor_href = parent.document.getElementById('visual_editor_href')) != null) {
        visual_editor_href.value = url;
      }
      if ((visual_editor_title = parent.document.getElementById('visual_editor_title')) != null) {
        visual_editor_title.value = title;
      }
      if ((visual_editor_target = parent.document.getElementById('visual_editor_target')) != null) {
        visual_editor_target.value = target || "";
      }
    }
  }
};

var resource_picker = {
  initialised: false
  , callback: null

  , init: function(callback) {

    if (!this.initialised) {
      this.callback = callback;
      this.initialised = true;
    }
  }
};

//parse a URL to form an object of properties
parseURL = function(url)
{
  //save the unmodified url to href property
  //so that the object we get back contains
  //all the same properties as the built-in location object
  var loc = { 'href' : url };

  //split the URL by single-slashes to get the component parts
  var parts = url.replace('//', '/').split('/');

  //store the protocol and host
  loc.protocol = parts[0];
  loc.host = parts[1];

  //extract any port number from the host
  //from which we derive the port and hostname
  parts[1] = parts[1].split(':');
  loc.hostname = parts[1][0];
  loc.port = parts[1].length > 1 ? parts[1][1] : '';

  //splice and join the remainder to get the pathname
  parts.splice(0, 2);
  // ensure we don't destroy absolute urls like /system/images/whatever.jpg
  loc.pathname = (loc.href[0] == '/' ? ("/" + loc.host) : '');
  loc.pathname += '/' + parts.join('/');

  //extract any hash and remove from the pathname
  loc.pathname = loc.pathname.split('#');
  loc.hash = loc.pathname.length > 1 ? '#' + loc.pathname[1] : '';
  loc.pathname = loc.pathname[0];

  //extract any search query and remove from the pathname
  loc.pathname = loc.pathname.split('?');
  loc.search = loc.pathname.length > 1 ? '?' + loc.pathname[1] : '';
  loc.pathname = loc.pathname[0];

  var options = url.split('?')[1];
  loc.options = options;

  //return the final object
  return loc;
};
