#!/usr/bin/env ruby
# Load bundler
begin
  require 'rubygems'
  require 'bundler'
rescue LoadError
  puts "\n=== ACTION REQUIRED ===\n\n"
  puts "Could not load the bundler gem. This is a required dependency of Refinery CMS."
  puts "Please install it with `gem install bundler`.\n\n"
  exit
end

# Load other required libraries
require 'pathname'
require 'fileutils'
require 'optparse'

# Load refinerycms
require Pathname.new(File.expand_path(File.dirname(__FILE__) << "/..")).join('lib', 'refinery')

module Refinery
  class AppGenerator

    def initialize(input)
      # Default options
      @input = input
      @options = {
        :database => {
          :adapter => 'sqlite3',
          :username => 'root',
          :password => ''
        },
        :force => false,
        :heroku => false,
        :update => false,
        :gems => []
      }

      @optparse = OptionParser.new do |opts|
        opts.banner = "Purpose: Installs Refinery CMS to the specified directory"
        opts.banner << "\nUsage:   #{opts.program_name} /path/to/project [options]"

        opts.separator ""
        opts.separator "Specific Options:"

        # Rails supports more options, but Refinery is only tested on these three
        databases = %w(mysql postgresql sqlite3)
        opts.on("-d DATABASE", "--database DATABASE", databases, "Select the database (default sqlite3)", "  #{databases.join('/')}") do |db|
          @options[:database][:adapter] = db
        end

        opts.on("-u USERNAME", '--database-username USERNAME', String, "Set the database username", '  (default root)') do |username|
          @options[:database][:username] = username
        end

        opts.on("-p PASSWORD", '--database-password PASSWORD', String, "Set the database password", "  (default '')") do |password|
          @options[:database][:password] = password
        end

        opts.on("-g", "--gems gem1,gem2,gem3", Array, "Additional gems to install") do |gems|
          @options[:gems] = gems.reject {|g| g.to_s =~ /^(refinerycms|rmagick)$/}.map {|g| "gem '#{g.to_s}'"}
        end

        opts.on("-f", "--force", "Force overwriting of directory") do
          @options[:force] = true
        end

        opts.on("--heroku [APP_NAME]", "Set up and deploy to Heroku") do |app_name|
          @options[:heroku] = app_name || ''
        end

        opts.on("--update", "--update", "Migrate the database instead of rebuilding it") do
           @options[:update] = true
        end

        opts.separator ""
        opts.separator "Common options:"

        opts.on_tail("-h", "--help", "Display this screen") do
          puts opts
          exit
        end

        opts.on_tail("-v", "--version", "Display the version") do
          puts Refinery.version
          exit
        end
      end
    end

    def run!
      # Grab input and ensure that the path doesn't exist already and other checks.
      validate!

      # Generate a Refinery CMS application
      generate!

      # Bundle the application which activates Refinery CMS
      bundle!

      # Run the newly activated Refinery CMS generator unless we're updating.
      run_command('rails generate refinerycms', {:cd => true}) unless @options[:update]

      # Output helpful messages to user
      output!
    end


    def validate!
      # Check for valid input
      begin
        @optparse.parse!(@input)
      rescue OptionParser::ParseError => pe
        puts pe
        puts "\n"
        puts @optparse
        exit
      end

      # Ensure only one path is specified
      unless @input.size == 1
        puts "Please specify a single path to install Refinery CMS"
        puts "\n"
        puts @optparse
        exit
      end

      # Get the name and path of the new application
      @app_path = Pathname.new(File.expand_path(@input.first))
      @app_name = @app_path.to_s.split(File::SEPARATOR).last

      if @app_path.directory? and @options[:force] == false
        puts "The directory '#{@app_path}' that you specified already exists."
        puts "Use --force to overwrite an existing directory."
        exit
      end
    end

    def generate!
      # Generate a rails application
      rails_command = "rails new \"#{@app_path}\""
      rails_command << " --database #{@options[:database][:adapter]}"
      rails_command << " --force" if @options[:force]
      rails_command << " --skip-test-unit --skip-prototype"
      rails_command << " --skip-gemfile" if @options[:update]
      run_command(rails_command, {:cd => false})
      abort "Generating Rails application failed. Exiting..." unless $?.success?
    end

    def bundle!
      # When using --update which skips the Gemfile a few things need to be handled manually:
      unless @options[:update]
        # Add refinery gems to the Gemfile
        gemfile_contents = Refinery.root.join('Gemfile').read
        refinery_gems = gemfile_contents.match(/# REFINERY CMS =+.*# END REFINERY CMS =+/m)[0]
        @app_path.join('Gemfile').open('a') do |f|
          f.write "\n#{refinery_gems}\n"
          f.write "\n# USER DEFINED\n#{@options[:gems].join("\n")}\n# END USER DEFINED" if @options[:gems].any?
        end
      end

      # Override database username and password
      find_and_replace('config/database.yml', %r{username:.*}, "username: #{@options[:database][:username]}")
      find_and_replace('config/database.yml', %r{password:.*}, "password: #{@options[:database][:password]}")

      # Specify the correct version of the Refinery CMS gem (may be git source).
      #src = Refinery.version !~ /\.pre$/ ? "'~> #{Refinery.version}'" : ":git => 'git://github.com/resolve/refinerycms.git'
      # TODO: Fix this upon release.
      src = ":git => 'git://github.com/resolve/refinerycms.git'"
      find_and_replace('Gemfile', %r{gem 'refinerycms',.*}, "gem 'refinerycms',              #{src}")

      # Add in AWS-S3 for Heroku
      find_and_replace('Gemfile', "# gem 'aws-s3', :require => 'aws/s3'",
                        "gem 'aws-s3', :require => 'aws/s3'") if @options[:heroku]

      puts "\n---------"
      puts "Refinery successfully installed in '#{@app_path}'!\n\n"

      # Automate
      # TODO: Check exit codes to see whether or not these worked
      puts "Installing gem requirements using bundler..\n"
      run_command("bundle install")
    end

    def output!
      unless @options[:update]
        # sqlite3 requires we use 'db:migrate' etc instead of 'db:setup'
        puts "\n\nSetting up your development database..\n"
        tasks = @options[:database][:adapter] == 'sqlite3' ? %w(db:migrate db:seed) : %w(db:setup)
        tasks.each do |task|
          run_command("rake -f \"#{@app_path.join('Rakefile')}\" #{task}")
        end
      else
        puts "\n\nMigrating your development database..\n"
        run_command("rake -f \"#{@app_path.join('Rakefile')}\" db:migrate")
      end

      # Deploy to Heroku
      if @options[:heroku]
        puts "\n\nInitializing and committing to git..\n"
        run_command("git init && git add . && git commit -am 'Initial Commit'")

        puts "\n\nCreating Heroku app..\n"
        run_command("heroku create #{@options[:heroku]}")

        puts "\n\nPushing to Heroku (this takes time, be patient)..\n"
        run_command("git push heroku master")

        puts "\n\nSetting up the Heroku database..\n"
        run_command("heroku rake db:setup")

        puts "\n\nRestarting servers...\n"
        run_command("heroku restart")
      end
      # End automation

      # Output helpful messages
      puts "\n=== ACTION REQUIRED ==="
      puts "Now you can launch your webserver using:"
      puts "\ncd #{@app_path}"
      puts "rails server"
      puts "\nThis will launch the built-in webserver at port 3000."
      puts "You can now see your site running in your browser at http://localhost:3000"

      if @options[:heroku]
        puts "\nIf you want files and images to work on heroku, you will need setup S3:"
        puts "heroku config:add S3_BUCKET=XXXXXXXXX S3_KEY=XXXXXXXXX S3_SECRET=XXXXXXXXXX"
      end

      puts "\nThanks for installing Refinery, enjoy creating your new application!"
      puts "---------\n\n"
    end

    private :validate!, :generate!, :bundle!, :output!

    def run_command(command, options = {})
      options = {:cd => true, :puts => true}.merge(options)
      to_run = %w()
      to_run << "cd \"#{@app_path}\" &&" if options[:cd]
      to_run << command

      if Refinery::WINDOWS
        to_run = %w(cmd /c) | to_run.map{|c| c.gsub(/\//m, '\\')}
      end

      to_run = to_run.join(' ')

      if options[:puts]
        puts "Running: #{to_run}"
        IO.popen(to_run) do |t|
          while (line = t.gets)
            puts line
          end
        end
      else
        `#{to_run}`
      end
    end

    def find_and_replace(file, find, replace)
      (contents = @app_path.join(file).read).gsub!(find, replace)
      (@app_path + file).open("w") do |f|
        f.puts contents
      end
    end

    protected :run_command, :find_and_replace
  end
end

if __FILE__ == $0
  Refinery::AppGenerator.new(ARGV).run!
end
